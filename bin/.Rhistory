}
}
close(umi_stream)
close(read1_stream)
close(read2_stream)
umi_dict <- dict()
umi_stream <- FastqStreamer(umi_file, 1)
read1_stream <- FastqStreamer(read1_file, 1)
read2_stream <- FastqStreamer(read2_file, 1)
n <- 0
while (length(umi <- yield(umi_stream))) {
read1 <- yield(read1_stream)
read2 <- yield(read2_stream)
# umi_seq <- umi@sread %>% toString
# read_id <- umi@id %>% toString
# read1_seq <- read1@sread %>% toString
# read2_seq <- read2@sread %>% toString
#
# if (!(umi_dict$has(umi_seq))) {
# 	# assign a new dict key/value element:
# 	tb <- tibble("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
# 	umi_dict$set(umi_seq, tb)
# } else {
# 	# check if reads matches and process accordingly:
# 	# each umi element of a tibble consists of the following cols:
# 	# id	read1	read2	count
# 	tem <- umi_dict$get(umi_seq)
# 	tem$dis1 <- str_dist(tem$read1, read1_seq)
# 	tem$dis2 <- str_dist(tem$read2, read2_seq)
#
# 	match <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,]
# 	if (dim(match)[[1]] == 0) {
# 		# if no matching reads, append the current read to tb as a new row
# 		updated_tb <- umi_dict$get(umi_seq) %>% add_row("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
# 		umi_dict$set(umi_seq, updated_tb)
# 	} else {
# 		# if matching reads, increase the count number of the first match by 1
# 		count <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count
# 		tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count <- count + 1
# 		umi_dict$set(umi_seq, select(tem, -c(dis1, dis2)))
# 	}
# }
n <- n + 1
if ((n %% 100) == 0) {
message(paste0("Processed ", n, " reads ..."))
}
}
close(umi_stream)
close(read1_stream)
close(read2_stream)
umi_dict <- dict()
umi_stream <- FastqStreamer(umi_file, 1)
read1_stream <- FastqStreamer(read1_file, 1)
read2_stream <- FastqStreamer(read2_file, 1)
n <- 0
while (length(umi <- yield(umi_stream))) {
read1 <- yield(read1_stream)
# read2 <- yield(read2_stream)
# umi_seq <- umi@sread %>% toString
# read_id <- umi@id %>% toString
# read1_seq <- read1@sread %>% toString
# read2_seq <- read2@sread %>% toString
#
# if (!(umi_dict$has(umi_seq))) {
# 	# assign a new dict key/value element:
# 	tb <- tibble("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
# 	umi_dict$set(umi_seq, tb)
# } else {
# 	# check if reads matches and process accordingly:
# 	# each umi element of a tibble consists of the following cols:
# 	# id	read1	read2	count
# 	tem <- umi_dict$get(umi_seq)
# 	tem$dis1 <- str_dist(tem$read1, read1_seq)
# 	tem$dis2 <- str_dist(tem$read2, read2_seq)
#
# 	match <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,]
# 	if (dim(match)[[1]] == 0) {
# 		# if no matching reads, append the current read to tb as a new row
# 		updated_tb <- umi_dict$get(umi_seq) %>% add_row("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
# 		umi_dict$set(umi_seq, updated_tb)
# 	} else {
# 		# if matching reads, increase the count number of the first match by 1
# 		count <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count
# 		tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count <- count + 1
# 		umi_dict$set(umi_seq, select(tem, -c(dis1, dis2)))
# 	}
# }
n <- n + 1
if ((n %% 100) == 0) {
message(paste0("Processed ", n, " reads ..."))
}
}
close(umi_stream)
close(read1_stream)
close(read2_stream)
umi_dict <- dict()
umi_stream <- FastqStreamer(umi_file, 1)
read1_stream <- FastqStreamer(read1_file, 1)
read2_stream <- FastqStreamer(read2_file, 1)
n <- 0
while (length(umi <- yield(umi_stream))) {
# read1 <- yield(read1_stream)
# read2 <- yield(read2_stream)
# umi_seq <- umi@sread %>% toString
# read_id <- umi@id %>% toString
# read1_seq <- read1@sread %>% toString
# read2_seq <- read2@sread %>% toString
#
# if (!(umi_dict$has(umi_seq))) {
# 	# assign a new dict key/value element:
# 	tb <- tibble("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
# 	umi_dict$set(umi_seq, tb)
# } else {
# 	# check if reads matches and process accordingly:
# 	# each umi element of a tibble consists of the following cols:
# 	# id	read1	read2	count
# 	tem <- umi_dict$get(umi_seq)
# 	tem$dis1 <- str_dist(tem$read1, read1_seq)
# 	tem$dis2 <- str_dist(tem$read2, read2_seq)
#
# 	match <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,]
# 	if (dim(match)[[1]] == 0) {
# 		# if no matching reads, append the current read to tb as a new row
# 		updated_tb <- umi_dict$get(umi_seq) %>% add_row("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
# 		umi_dict$set(umi_seq, updated_tb)
# 	} else {
# 		# if matching reads, increase the count number of the first match by 1
# 		count <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count
# 		tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count <- count + 1
# 		umi_dict$set(umi_seq, select(tem, -c(dis1, dis2)))
# 	}
# }
n <- n + 1
if ((n %% 100) == 0) {
message(paste0("Processed ", n, " reads ..."))
}
}
close(umi_stream)
close(read1_stream)
close(read2_stream)
umi_dict <- dict()
umi_stream <- FastqStreamer(umi_file, 1)
read1_stream <- FastqStreamer(read1_file, 1)
read2_stream <- FastqStreamer(read2_file, 1)
n <- 0
while (length(umi <- yield(read1_stream))) {
# read1 <- yield(read1_stream)
# read2 <- yield(read2_stream)
# umi_seq <- umi@sread %>% toString
# read_id <- umi@id %>% toString
# read1_seq <- read1@sread %>% toString
# read2_seq <- read2@sread %>% toString
#
# if (!(umi_dict$has(umi_seq))) {
# 	# assign a new dict key/value element:
# 	tb <- tibble("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
# 	umi_dict$set(umi_seq, tb)
# } else {
# 	# check if reads matches and process accordingly:
# 	# each umi element of a tibble consists of the following cols:
# 	# id	read1	read2	count
# 	tem <- umi_dict$get(umi_seq)
# 	tem$dis1 <- str_dist(tem$read1, read1_seq)
# 	tem$dis2 <- str_dist(tem$read2, read2_seq)
#
# 	match <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,]
# 	if (dim(match)[[1]] == 0) {
# 		# if no matching reads, append the current read to tb as a new row
# 		updated_tb <- umi_dict$get(umi_seq) %>% add_row("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
# 		umi_dict$set(umi_seq, updated_tb)
# 	} else {
# 		# if matching reads, increase the count number of the first match by 1
# 		count <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count
# 		tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count <- count + 1
# 		umi_dict$set(umi_seq, select(tem, -c(dis1, dis2)))
# 	}
# }
n <- n + 1
if ((n %% 100) == 0) {
message(paste0("Processed ", n, " reads ..."))
}
}
close(umi_stream)
close(read1_stream)
close(read2_stream)
umi_dict <- dict()
umi_stream <- FastqStreamer(umi_file, 1)
read1_stream <- FastqStreamer(read1_file, 1)
read2_stream <- FastqStreamer(read2_file, 1)
n <- 0
while (length(umi <- yield(umi_stream))) {
# read1 <- yield(read1_stream)
# read2 <- yield(read2_stream)
# umi_seq <- umi@sread %>% toString
# read_id <- umi@id %>% toString
# read1_seq <- read1@sread %>% toString
# read2_seq <- read2@sread %>% toString
#
# if (!(umi_dict$has(umi_seq))) {
# 	# assign a new dict key/value element:
# 	tb <- tibble("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
# 	umi_dict$set(umi_seq, tb)
# } else {
# 	# check if reads matches and process accordingly:
# 	# each umi element of a tibble consists of the following cols:
# 	# id	read1	read2	count
# 	tem <- umi_dict$get(umi_seq)
# 	tem$dis1 <- str_dist(tem$read1, read1_seq)
# 	tem$dis2 <- str_dist(tem$read2, read2_seq)
#
# 	match <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,]
# 	if (dim(match)[[1]] == 0) {
# 		# if no matching reads, append the current read to tb as a new row
# 		updated_tb <- umi_dict$get(umi_seq) %>% add_row("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
# 		umi_dict$set(umi_seq, updated_tb)
# 	} else {
# 		# if matching reads, increase the count number of the first match by 1
# 		count <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count
# 		tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count <- count + 1
# 		umi_dict$set(umi_seq, select(tem, -c(dis1, dis2)))
# 	}
# }
n <- n + 1
if ((n %% 100) == 0) {
message(paste0("Processed ", n, " reads ..."))
}
}
close(umi_stream)
close(read1_stream)
close(read2_stream)
umi_file
test <- readFastq(umi_file)
test
test[[1]]
test@id[[1]]
width(test)
length(test)
umi_fastq <- readFastq(umi_file)
read1_fastq <- readFasta(read1_file)
read2_fastq <- readFasta(read2_file)
read1_fastq <- readFastq(read1_file)
read2_fastq <- readFastq(read2_file)
test@id[[1]]
for (i in 1:length(umi_fastq)) {
print (i)
}
for (i in 1:length(umi_fastq)) {
print (i)
print (umi_fastq@id[[i]])
}
for (i in 1:length(umi_fastq)) {
print (i)
}
for (i in 1:length(umi_fastq)) {
# print (i)
print (umi_fastq@id[[i]])
}
n <- 0
for (i in 1:length(umi_fastq)) {
if ((i %% 1001) == 0) {
message(paste0("Processed ", i, " reads ..."))
}
print (umi_fastq@id[[i]])
# umi_seq <- umi@sread %>% toString
# read_id <- umi@id %>% toString
# read1_seq <- read1@sread %>% toString
# read2_seq <- read2@sread %>% toString
#
# if (!(umi_dict$has(umi_seq))) {
# 	# assign a new dict key/value element:
# 	tb <- tibble("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
# 	umi_dict$set(umi_seq, tb)
# } else {
# 	# check if reads matches and process accordingly:
# 	# each umi element of a tibble consists of the following cols:
# 	# id	read1	read2	count
# 	tem <- umi_dict$get(umi_seq)
# 	tem$dis1 <- str_dist(tem$read1, read1_seq)
# 	tem$dis2 <- str_dist(tem$read2, read2_seq)
#
# 	match <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,]
# 	if (dim(match)[[1]] == 0) {
# 		# if no matching reads, append the current read to tb as a new row
# 		updated_tb <- umi_dict$get(umi_seq) %>% add_row("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
# 		umi_dict$set(umi_seq, updated_tb)
# 	} else {
# 		# if matching reads, increase the count number of the first match by 1
# 		count <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count
# 		tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count <- count + 1
# 		umi_dict$set(umi_seq, select(tem, -c(dis1, dis2)))
# 	}
# }
}
for (i in 1:length(umi_fastq)) {
if ((i %% 1001) == 0) {
message(paste0("Processed ", i, " reads ..."))
}
umi_fastq@id[[i]]
# umi_seq <- umi@sread %>% toString
# read_id <- umi@id %>% toString
# read1_seq <- read1@sread %>% toString
# read2_seq <- read2@sread %>% toString
#
# if (!(umi_dict$has(umi_seq))) {
# 	# assign a new dict key/value element:
# 	tb <- tibble("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
# 	umi_dict$set(umi_seq, tb)
# } else {
# 	# check if reads matches and process accordingly:
# 	# each umi element of a tibble consists of the following cols:
# 	# id	read1	read2	count
# 	tem <- umi_dict$get(umi_seq)
# 	tem$dis1 <- str_dist(tem$read1, read1_seq)
# 	tem$dis2 <- str_dist(tem$read2, read2_seq)
#
# 	match <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,]
# 	if (dim(match)[[1]] == 0) {
# 		# if no matching reads, append the current read to tb as a new row
# 		updated_tb <- umi_dict$get(umi_seq) %>% add_row("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
# 		umi_dict$set(umi_seq, updated_tb)
# 	} else {
# 		# if matching reads, increase the count number of the first match by 1
# 		count <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count
# 		tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count <- count + 1
# 		umi_dict$set(umi_seq, select(tem, -c(dis1, dis2)))
# 	}
# }
}
umi_fastq@sread[[i]]
for (i in 1:length(umi_fastq)) {
if ((i %% 1001) == 0) {
message(paste0("Processed ", i, " reads ..."))
}
umi_seq <- umi_fastq@sread[[i]] %>% toString
read_id <- umi_fastq@id[[i]] %>% toString
read1_seq <- read1_fastq@sread[[i]] %>% toString
read2_seq <- read2_fastq@sread[[i]] %>% toString
#
# if (!(umi_dict$has(umi_seq))) {
# 	# assign a new dict key/value element:
# 	tb <- tibble("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
# 	umi_dict$set(umi_seq, tb)
# } else {
# 	# check if reads matches and process accordingly:
# 	# each umi element of a tibble consists of the following cols:
# 	# id	read1	read2	count
# 	tem <- umi_dict$get(umi_seq)
# 	tem$dis1 <- str_dist(tem$read1, read1_seq)
# 	tem$dis2 <- str_dist(tem$read2, read2_seq)
#
# 	match <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,]
# 	if (dim(match)[[1]] == 0) {
# 		# if no matching reads, append the current read to tb as a new row
# 		updated_tb <- umi_dict$get(umi_seq) %>% add_row("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
# 		umi_dict$set(umi_seq, updated_tb)
# 	} else {
# 		# if matching reads, increase the count number of the first match by 1
# 		count <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count
# 		tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count <- count + 1
# 		umi_dict$set(umi_seq, select(tem, -c(dis1, dis2)))
# 	}
# }
}
for (i in 1:length(umi_fastq)) {
if ((i %% 1001) == 0) {
message(paste0("Processed ", i, " reads ..."))
}
umi_seq <- umi_fastq@sread[[i]] %>% toString
read_id <- umi_fastq@id[[i]] %>% toString
read1_seq <- read1_fastq@sread[[i]] %>% toString
read2_seq <- read2_fastq@sread[[i]] %>% toString
if (!(umi_dict$has(umi_seq))) {
# assign a new dict key/value element:
tb <- tibble("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
umi_dict$set(umi_seq, tb)
} else {
# check if reads matches and process accordingly:
# each umi element of a tibble consists of the following cols:
# id	read1	read2	count
tem <- umi_dict$get(umi_seq)
tem$dis1 <- str_dist(tem$read1, read1_seq)
tem$dis2 <- str_dist(tem$read2, read2_seq)
match <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,]
if (dim(match)[[1]] == 0) {
# if no matching reads, append the current read to tb as a new row
updated_tb <- umi_dict$get(umi_seq) %>% add_row("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
umi_dict$set(umi_seq, updated_tb)
} else {
# if matching reads, increase the count number of the first match by 1
count <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count
tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count <- count + 1
umi_dict$set(umi_seq, select(tem, -c(dis1, dis2)))
}
}
}
umi_dict
umi_dict$as_list()
umi_dict <- dict()
umi_stream <- FastqStreamer(umi_file, 1)
read1_stream <- FastqStreamer(read1_file, 1)
read2_stream <- FastqStreamer(read2_file, 1)
umi_fastq <- readFastq(umi_file)
read1_fastq <- readFastq(read1_file)
read2_fastq <- readFastq(read2_file)
for (i in 1:length(umi_fastq)) {
umi_seq <- umi_fastq@sread[[i]] %>% toString
read_id <- umi_fastq@id[[i]] %>% toString
read1_seq <- read1_fastq@sread[[i]] %>% toString
read2_seq <- read2_fastq@sread[[i]] %>% toString
if (!(umi_dict$has(umi_seq))) {
# assign a new dict key/value element:
tb <- tibble("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
umi_dict$set(umi_seq, tb)
} else {
# check if reads matches and process accordingly:
# each umi element of a tibble consists of the following cols:
# id	read1	read2	count
tem <- umi_dict$get(umi_seq)
tem$dis1 <- str_dist(tem$read1, read1_seq)
tem$dis2 <- str_dist(tem$read2, read2_seq)
match <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,]
if (dim(match)[[1]] == 0) {
# if no matching reads, append the current read to tb as a new row
updated_tb <- umi_dict$get(umi_seq) %>% add_row("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
umi_dict$set(umi_seq, updated_tb)
} else {
# if matching reads, increase the count number of the first match by 1
count <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count
tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count <- count + 1
umi_dict$set(umi_seq, select(tem, -c(dis1, dis2)))
}
}
if ((i %% 5000) == 0) {
message(paste0("Processed ", i, " reads ..."))
}
}
for (i in 1:length(umi_fastq)) {
umi_seq <- umi_fastq@sread[[i]] %>% toString
read_id <- umi_fastq@id[[i]] %>% toString
read1_seq <- read1_fastq@sread[[i]] %>% toString
read2_seq <- read2_fastq@sread[[i]] %>% toString
# if (!(umi_dict$has(umi_seq))) {
# 	# assign a new dict key/value element:
# 	tb <- tibble("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
# 	umi_dict$set(umi_seq, tb)
# } else {
# 	# check if reads matches and process accordingly:
# 	# each umi element of a tibble consists of the following cols:
# 	# id	read1	read2	count
# 	tem <- umi_dict$get(umi_seq)
# 	tem$dis1 <- str_dist(tem$read1, read1_seq)
# 	tem$dis2 <- str_dist(tem$read2, read2_seq)
#
# 	match <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,]
# 	if (dim(match)[[1]] == 0) {
# 		# if no matching reads, append the current read to tb as a new row
# 		updated_tb <- umi_dict$get(umi_seq) %>% add_row("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
# 		umi_dict$set(umi_seq, updated_tb)
# 	} else {
# 		# if matching reads, increase the count number of the first match by 1
# 		count <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count
# 		tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count <- count + 1
# 		umi_dict$set(umi_seq, select(tem, -c(dis1, dis2)))
# 	}
# }
if ((i %% 5000) == 0) {
message(paste0("Processed ", i, " (", format(round((i/length(umi_fastq))*100, 2), nsmall = 2), "%) reads ..."))
}
}
for (i in 1:length(umi_fastq)) {
umi_seq <- umi_fastq@sread[[i]] %>% toString
read_id <- umi_fastq@id[[i]] %>% toString
read1_seq <- read1_fastq@sread[[i]] %>% toString
read2_seq <- read2_fastq@sread[[i]] %>% toString
# if (!(umi_dict$has(umi_seq))) {
# 	# assign a new dict key/value element:
# 	tb <- tibble("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
# 	umi_dict$set(umi_seq, tb)
# } else {
# 	# check if reads matches and process accordingly:
# 	# each umi element of a tibble consists of the following cols:
# 	# id	read1	read2	count
# 	tem <- umi_dict$get(umi_seq)
# 	tem$dis1 <- str_dist(tem$read1, read1_seq)
# 	tem$dis2 <- str_dist(tem$read2, read2_seq)
#
# 	match <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,]
# 	if (dim(match)[[1]] == 0) {
# 		# if no matching reads, append the current read to tb as a new row
# 		updated_tb <- umi_dict$get(umi_seq) %>% add_row("id" = read_id, "read1" = read1_seq, "read2" = read2_seq, "count" = 1)
# 		umi_dict$set(umi_seq, updated_tb)
# 	} else {
# 		# if matching reads, increase the count number of the first match by 1
# 		count <- tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count
# 		tem[tem$dis1 <= mismatch & tem$dis2 <= mismatch,][1,]$count <- count + 1
# 		umi_dict$set(umi_seq, select(tem, -c(dis1, dis2)))
# 	}
# }
if ((i %% 2000) == 0) {
message(paste0("Processed ", i, " (", format(round((i/length(umi_fastq))*100, 2), nsmall = 2), "%) reads ..."))
}
}
umi_seq <- umi_fastq@sread %>% toString
umi_seq
read_id <- umi_fastq@id %>% toString
class(umi_seq)
typeof(umi_seq)
umi_seq <- umi_fastq@sread %>% toString
read_id <- umi_fastq@id %>% toString
read1_seq <- read1_fastq@sread %>% toString
read2_seq <- read2_fastq@sread %>% toString
read2_seq
